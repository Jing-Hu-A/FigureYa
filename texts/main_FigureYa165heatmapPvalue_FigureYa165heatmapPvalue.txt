FigureYa165heatmapPvalue
FigureYa165heatmapPvalue
Date：2025-5-20
Author：Xiaofan Lu
Reviewer：Ying Ge、Junyi Shen
需求描述Description of requirements
热图展示亚型表达谱，并给出表达谱组间比较p值。The heat map shows the expression spectra of subtypes and gives the p-values for comparison between expression profiles
出自From
https://www.frontiersin.org/articles/10.3389/fonc.2019.01038
Figure 1. Expression of m6A RNA methylation regulators in gliomas with different clinicopathological features. (A-D) The expression levels of thirteen m6A RNA methylation regulators in gliomas with different WHO grades.
应用场景Application scenarios
针对两组或多组样本，做组间差异检验，提供4种常用非参或参数检验法For two or more groups of samples, the difference test between groups was performed, and four commonly used non-parametric or parametric test methods were provided：
两组，参数检验“t.test”, 非参数检验“wilcox”Two groups, parametric test "t.test" and non-parametric test "wilcox"
多组，参数检验“anova”, 非参数检验“kruskal”Multi-group, parametric test "anova", non-parametric test "kruskal"
用热图展示亚型表达谱，并给出每个基因对应的表达谱组间比较p值。The subtype expression profiles were displayed with heat maps, and the corresponding expression profiles of each gene were given for comparison between groups.
环境设置Environment settings
使用国内镜像安装包Use the domestic mirror installation package
options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
加载包Load the package
library(stringr)
library(pheatmap)
library(gplots)
library(grid)
Sys.setenv(LANGUAGE = "en") #显示英文报错信息显示英文报错信息
options(stringsAsFactors = FALSE) #禁止chr转成factor   Prohibiting CHR from converting to factor
加载自定义函数Load custom functions
# 显示进程Show the process
display.progress = function (index, totalN, breakN=20) {
  
  if ( index %% ceiling(totalN/breakN)  ==0  ) {
    cat(paste(round(index*100/totalN), "% ", sep=""))
  }
  
} 

# 计算组间统计差异Statistical differences between groups were calculated
cross_subtype_compr <- function(expr = NULL,
                                subt = NULL,
                                subt.label = "Subtype",
                                two_sam_compr_method = "wilcox",
                                multi_sam_compr_method = "kruskal",
                                res.path = NULL) {
  
  if (!is.element(two_sam_compr_method, c("t.test", "wilcox"))) {stop("Two samples comparison should be t.test or wilcox!\n") }
  if (!is.element(multi_sam_compr_method, c("anova", "kruskal"))) {stop("multiple samples comparison should be kruskal or anova!\n") }
  
  subt.name <- unique(subt[,subt.label])
  n.subt <- length(subt.name)
  if(n.subt < 2) {stop("The number of subtype should be greater than 2!\n")}
  
  comprTab <- NULL
  
  # 两个亚型且为非参数检验Two isotypes are non-parametric tests
  if(n.subt == 2 & two_sam_compr_method == "wilcox") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp1 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[1]),,drop = F])])
      tmp2 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[2]),,drop = F])])
      wt <- wilcox.test(tmp1,tmp2)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = wt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 两个亚型且为参数检验Two isotypes are parametric tests
  if(n.subt == 2 & two_sam_compr_method == "t.test") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp1 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[1]),,drop = F])])
      tmp2 <- as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[2]),,drop = F])])
      tt <- t.test(tmp1,tmp2)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = tt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 多个亚型且为非参数检验Multiple subtypes and nonparametric tests
  if(n.subt > 2 & multi_sam_compr_method == "kruskal") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp.list <- list()
      for (n in 1:n.subt) {
        tmp.list[[n]] <- data.frame(value = as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[n]),,drop = F])]),
                                    subt = subt.name[n],
                                    stringsAsFactors = F)
      }
      tmp <- do.call(rbind,tmp.list)
      kt <- kruskal.test(value ~ subt,data = tmp)
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = kt$p.value,
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 多个亚型且为参数检验Multiple subtypes and nonparametric tests
  if(n.subt > 2 & multi_sam_compr_method == "anova") {
    for (i in 1:nrow(expr)) {
      display.progress(index = i,totalN = nrow(expr))
      tmp.list <- list()
      for (n in 1:n.subt) {
        tmp.list[[n]] <- data.frame(value = as.numeric(expr[i,rownames(subt[which(subt[,subt.label] == subt.name[n]),,drop = F])]),
                                    subt = subt.name[n],
                                    stringsAsFactors = F)
      }
      tmp <- do.call(rbind,tmp.list)
      at <- summary(aov(value ~ subt,data = tmp))
      comprTab <- rbind.data.frame(comprTab,
                                   data.frame(gene = rownames(expr)[i],
                                              nominal.p.value = at[[1]][1,5],
                                              stringsAsFactors = F),
                                   stringsAsFactors = F)
    }
  }
  
  # 调整p值Adjust the p-value
  comprTab$adjusted.p.value = p.adjust(comprTab$nominal.p.value,method = "BH")
  # 按p值排序Sort by p-value
  #comprTab <- comprTab[order(comprTab$adjusted.p.value, decreasing = F),] 
  
  write.table(comprTab,file.path(res.path,"comprTab.txt"),sep = "\t",row.names = F,quote = F)
  return(comprTab)
}
输入文件Enter the file
如果你自己的数据已经整理成easy_input*文件的格式，就直接跳到“差异表达分析”If your own data has been organized into a easy_input* file format, jump straight to Difference Representation Analysis。
输入文件的下载Enter the download of the file
基因表达矩阵，CGGA.mRNA_array_301_gene_level.20191128.txt，每行一个基因，每列一个sample。从CGGA下载Gene expression matrix, CGGA.mRNA_array_301_gene_level.20191128.txt, one gene per row, one sample per column. Download from CGGA：
Expression Data (gene level)
，解压unpack；
分组信息，CGGA.mRNA_array_301_clinical.20191128.txt，至少包含CGGA_ID和Grade两列，这里用Grade为LGG和GBM分组。从CGGA下载Grouping information, CGGA.mRNA_array_301_clinical.20191128.txt, contains at least two columns, CGGA_ID and Grade, here Grade is used to group LGG and GBM. Download from CGGA：
Clinical Data
，解压unpack；
读取基因表达矩阵Read the gene expression matrix
#exp_data <- read.table("CGGA.mRNA_array_301_gene_level.20191128.txt", header=T, row.names=1, sep="\t")
# 为方便传输，只保留小数点后1位For ease of transmission, only 1 decimal place is retained
#write.csv(round(exp_data,1), "easy_input_expr_ori.csv", quote = F)
exp_data <- read.csv("easy_input_expr_all.csv", row.names = 1)
exp_data[1:3,1:3]
读取分组信息Read the grouping information
用到两列Two columns are used：CGGA_ID和Grade
clinical_data <- read.table("CGGA.mRNA_array_301_clinical.20191128.txt", header=T, sep="\t")
clinical_data <- clinical_data[!is.na(clinical_data$Grade), ]
clinical_data[1,]
Subtype <- data.frame(Subtype = clinical_data$Grade)
row.names(Subtype) <- clinical_data$CGGA_ID
# 保存到文件，便于模仿格式Save to a file for easy imitation of formatting
write.csv(Subtype, "easy_input_group.csv", quote = F)
提取感兴趣的基因的表达矩阵Extract the expression matrix of the gene of interest
# 读取基因名Read the gene name
mygene <- read.table("easy_input_gene.txt")$V1

# 获取感兴趣的基因表达谱Obtain gene expression profiles of interest
mygene_data <- exp_data[mygene, ]
mygene_data[1:5, 1:5]
# 保存到文件Save to file
write.csv(mygene_data, "easy_input_expr.csv", quote = F)
差异表达分析Differential expression analysis
# 用全部基因来画Draw with all genes
n.show_top_gene <- nrow(mygene_data)
# 或者取top 20个基因来画Or take the top 20 genes to draw
#n.show_top_gene <- 20 

# 按分组排序Sort by group
subt.order <- Subtype[order(Subtype$Subtype),,drop = F]
indata <- mygene_data[comprTab$gene[1:n.show_top_gene],rownames(subt.order)]
开始画图Start drawing
# 数据标准化和边界设置Data standardization and boundary setting
plotdata <- t(scale(t(indata)))
plotdata[plotdata > 2] <- 2
plotdata[plotdata < -2] <- -2

# 调整行名Adjust the line name
blank <- "    " # 行名和p值之间的间隔The interval between the line name and the p-value
p.value <- comprTab$adjusted.p.value[1:n.show_top_gene]
sig.label <- ifelse(p.value < 0.001,"****",
                    ifelse(p.value < 0.005,"***",
                           ifelse(p.value < 0.01,"**",
                                  ifelse(p.value < 0.05,"*",""))))
p.label <- formatC(p.value, # 将p值变成保留两位小数的科学计数法Turn the p-value into a scientific notation method that retains two decimal places
                   format = "e",
                   digits = 2)

add.label <- str_pad(paste0(rownames(plotdata),sig.label), # 固定行名宽度并再右侧补齐Fix the line name width and fill in on the right side" "
                     max(nchar(paste0(rownames(plotdata),sig.label))), 
                     side = "right")

annCol <- subt.order # 获得排序后的亚型注释信息，这里只有一个变量需要注释To obtain the sorted subtype annotation information, there is only one variable that needs to be annotated
colnames(annCol)[1] <- paste(str_pad(colnames(annCol)[1], # 注释列名补上The annotations are listed and added"P-value"，宽度和刚才一致The width is the same as just now
                                     max(nchar(paste0(rownames(plotdata),sig.label))), 
                                     side = "right"),
                             "P-value",
                             sep = blank)

annColors <- list(c("WHO II"="lightblue", "WHO III"="darkgreen", "WHO IV"="pink")) # 如果有多个变量要注释颜色请补充If there are multiple variables to annotate the color, please add itc()
names(annColors) <- colnames(annCol)[1] # 如果有多个变量要注释颜色请补充每张list的name   If there are multiple variables to annotate the color, add the name of each list

# 绘制热图Draw a heat map
pheatmap(cellheight = 15, cellwidth = 1,
         mat = plotdata, # 输入数据Enter data
         scale = "none", # 不标准化因为数据已经被标准化Not standardized because the data has been standardized
         annotation_col = annCol, # 列注释信息Column annotation information
         annotation_colors = annColors, # 列注释对应的颜色The color corresponding to the column annotation
         cluster_cols = F, # 列不聚类Columns are not clustered
         cluster_rows = F, # 行不聚类Do not cluster your actions
         show_colnames = F, # 不显示列名The column name is not displayed
         show_rownames = T, # 显示基因名Show gene name
         #annotation_legend = F, # 不显示图例The legend is not displayed
         labels_row = paste(add.label, p.label, sep=blank), # 自定义样本名义blank作间隔Customize the sample nominal blank as the interval
         fontfamily = "mono", # 关键，使用fixed font而不是proportional font   Critically, use fixed font instead of proportional font
         gaps_col = c(173), # 根据自己的数据设置空白间隔的位置Set the position of the blank interval according to your data
         filename = "heatmapPvalue.pdf")
后期处理Post-processing
输出的pdf文件是矢量图，可使用Illustrator等矢量图工具打开，仿照例文将各个亚型的名字添加在annotation bar的上方。The output pdf file is a vector image, which can be opened using vector tools such as Illustrator, and the names of each subtype are added above the annotation bar as in the example
Session Info
sessionInfo()