FigureYa177RNAvelocity
FigureYa177RNAvelocity
小丫画图出品
2020-5-3
欢迎关注“小丫画图”公众号，回复“小白”，看小视频，实现点鼠标跑代码。
小丫微信: epigenomics E-mail:
figureya@126.com
作者：Jarning
小丫编辑校验
需求描述
使用velotyto对单细胞数据进行RNA velocity分析
出自
https://doi.org/10.1172/jci.insight.131092
Figure 3. Transcriptional activity in aging cardiac fibroblasts. (D) Transcriptional activity was estimated by measuring the ratio between unspliced and spliced mRNAs. This so-called RNA velocity is represented by high-dimensional vectors;
the longer the arrow in the plot, the higher the transcriptional activity
as seen in the extremities of states h, j, and l plot containing mostly old cells.
应用场景
RNA velocity（RNA速率），即RNA丰度的时间导数，可以通过区分标准单细胞RNA测序中未剪接和剪接的mRNA来预测估计。研究人员认为RNA速率是一个矢量，能预测未来几小时的单细胞状态。RNA速率将极大地帮助研究人员分析发育谱系和细胞动力学。
可以从fastq开始运行，也可以从matrix开始运行。
下载原始数据
原始数据在此
直接运行script文件夹下的
01-download.sh
下载数据。
环境设置
见
scripts/s0_createEnv.Rmd
文章的环境配置如下
软件
版本
本教程的版本
Seurat
2.2.0
2.2.0
Monocle
2.4
2.14
velocyto.R
0.17
0.60
cellranger
2.1.0
3.1.0
安装和配置cellranger
cellranger安装
参考
10X官方文档
，直接下载最新版安装。
Make reference
cellranger官网有做好的mm10的reference，但是作者没有直接采用。
Reads were aligned to GRCm38 reference genome, and gene annotation was extracted from gencode vM12. Intronic mapped reads were assumed to be part of pre-mRNAs; therefore, they were also assigned to the respective gene. Because Cell Ranger counts only those reads that map to exons, we created a
modifed gene transfer format file
, which
denotes each gene transcript locus as 1 exon and rebuilt a Cell Ranger reference (cellranger mkref).
This step was necessary because of a high number of pre-mRNA in nuclei.
作者采用的是基因组序列
GRCm38
，基因注释是
gencode vM12
本文采用的是single-nucleus sequencing，为了将intron区域的counts也计入表达，作者重新制作了基因GFT文件。将整个转录本作为1个exon来看待。
关于这一点，10X官方网站上是这样说的：
To be considered for transcriptome alignment, genes must have annotations with feature type ‘exon’ (column 3) in the GTF file.
下面是gencode vM12的前8列，我们需要把所有transcript都提取出来，然后改成exon
chr1    HAVANA  gene    3073253 3074322 .   +   .
chr1    HAVANA  transcript  3073253 3074322 .   +   .
chr1    HAVANA  exon    3073253 3074322 .   +   .
chr1    ENSEMBL gene    3102016 3102125 .   +   .
chr1    ENSEMBL transcript  3102016 3102125 .   +   .
用一个简单的python脚本解决这个问题。
with open("gencode.vM12.annotation.gtf") as fi:
    with open("gencode.vM12.transcripts.gtf", "w") as fo:
        for line in fi:
            if line.startswith("#"):
                fo.write(line)
            elif line.split()[2] == "transcript":
                line_list = line.rstrip("\n").split("\t")
                line_list[2] = "exon"
                fo.write("\t".join(line_list)+"\n")
            else:
                pass
下面来build index
cellranger mkref --genome="gencode_vM12" \
                 --fasta=GRCm38.p5.genome.fa \
                 --genes=gencode.vM12.transcripts.gtf \
                 --nthreads 8
这一步大概需要32GB内存。设定为8个threads，大约需要1小时。
Indexing a typical human 3Gb FASTA file often takes up to 8 core hours and requires 32 GB of memory.
这一步的结果如下
.
├── gencode_vM12
│   ├── fasta
│   │   ├── genome.fa
│   │   └── genome.fa.fai
│   ├── genes
│   │   └── genes.gtf
│   ├── pickle
│   │   └── genes.pickle
│   ├── reference.json
│   └── star
│       ├── chrLength.txt
│       ├── chrNameLength.txt
│       ├── chrName.txt
│       ├── chrStart.txt
│       ├── exonGeTrInfo.tab
│       ├── exonInfo.tab
│       ├── geneInfo.tab
│       ├── Genome
│       ├── genomeParameters.txt
│       ├── SA
│       ├── SAindex
│       ├── sjdbInfo.txt
│       ├── sjdbList.fromGTF.out.tab
│       ├── sjdbList.out.tab
│       └── transcriptInfo.tab
安装velocyto.py
利用Anaconda进行虚拟环境和包管理
下载reference文件
genes.gtf，利用gencode vM12版本(见上一步Make reference)
mm10_rmsk.gtf
安装相关R包
详见
s0_createEnv.Rmd
velocyto.R
在Rstudio中进行安装
if (!requireNamespace("devtools", quietly = TRUE))
    install.packages("devtools")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("pcaMethods")
devtools::install_github("velocyto-team/velocyto.R")
Seurat
devtools::install_version(package = 'Seurat', version = package_version('2.2.0'))
Monocle2
BiocManager::install("monocle")
上游分析
cellranger count
input
: fastq
output
: bam/gene expression matrix (mtx)
这是这个项目的文件树
.
├── data
│   ├── fastq
│   │   ├── O1
│   │   ├── O2
│   │   ├── O3
│   │   ├── Y1
│   │   ├── Y2
│   │   └── Y3
├── ref
│   ├── gencode_vM12
│   │   ├── fasta
│   │   ├── genes
│   │   ├── pickle
│   │   ├── reference.json
│   │   └── star
│   ├── gencode.vM12.annotation.gtf
│   ├── mm10_rmsk.gtf
└── scripts
    ├── 01-download.sh
    ├── 02-count.sh
    ├── E-MTAB-7869.sdrf.txt
    ├── fastq.txt
    └── run_parallel.py
fastq文件夹的组织形式如下
fastq/
├── O1
│   ├── O1_Sample_SaS_CB_002_S4_L006_I1_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L006_R1_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L006_R2_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L007_I1_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L007_R1_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L007_R2_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L008_I1_001.fastq.gz
│   ├── O1_Sample_SaS_CB_002_S4_L008_R1_001.fastq.gz
│   └── O1_Sample_SaS_CB_002_S4_L008_R2_001.fastq.gz
├── O2
│   ├── O2_SaS_CB_005_S10_L007_I1_001.fastq.gz
│   ├── O2_SaS_CB_005_S10_L007_R1_001.fastq.gz
│   ├── O2_SaS_CB_005_S10_L007_R2_001.fastq.gz
│   ├── O2_SaS_CB_005_S11_L007_I1_001.fastq.gz
│   ├── O2_SaS_CB_005_S11_L007_R1_001.fastq.gz
│   ├── O2_SaS_CB_005_S11_L007_R2_001.fastq.gz
│   ├── O2_SaS_CB_005_S12_L007_I1_001.fastq.gz
│   ├── O2_SaS_CB_005_S12_L007_R1_001.fastq.gz
│   ├── O2_SaS_CB_005_S12_L007_R2_001.fastq.gz
│   ├── O2_SaS_CB_005_S9_L007_I1_001.fastq.gz
│   ├── O2_SaS_CB_005_S9_L007_R1_001.fastq.gz
│   └── O2_SaS_CB_005_S9_L007_R2_001.fastq.gz
├── O3
│   ├── O3_SaS_CB_011_S1_L001_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L001_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L001_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L002_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L002_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L002_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L003_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L003_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L003_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L004_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L004_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S1_L004_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L001_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L001_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L001_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L002_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L002_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L002_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L003_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L003_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L003_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L004_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L004_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S2_L004_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L001_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L001_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L001_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L002_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L002_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L002_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L003_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L003_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L003_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L004_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L004_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S3_L004_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L001_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L001_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L001_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L002_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L002_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L002_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L003_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L003_R1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L003_R2_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L004_I1_001.fastq.gz
│   ├── O3_SaS_CB_011_S4_L004_R1_001.fastq.gz
│   └── O3_SaS_CB_011_S4_L004_R2_001.fastq.gz
├── Y1
│   ├── Y1_Sample_SaS_CB_001_S3_L006_I1_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L006_R1_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L006_R2_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L007_I1_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L007_R1_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L007_R2_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L008_I1_001.fastq.gz
│   ├── Y1_Sample_SaS_CB_001_S3_L008_R1_001.fastq.gz
│   └── Y1_Sample_SaS_CB_001_S3_L008_R2_001.fastq.gz
├── Y2
│   ├── Y2_SaS_CB_003_S1_L005_I1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S1_L005_R1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S1_L005_R2_001.fastq.gz
│   ├── Y2_SaS_CB_003_S2_L005_I1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S2_L005_R1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S2_L005_R2_001.fastq.gz
│   ├── Y2_SaS_CB_003_S3_L005_I1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S3_L005_R1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S3_L005_R2_001.fastq.gz
│   ├── Y2_SaS_CB_003_S4_L005_I1_001.fastq.gz
│   ├── Y2_SaS_CB_003_S4_L005_R1_001.fastq.gz
│   └── Y2_SaS_CB_003_S4_L005_R2_001.fastq.gz
└── Y3
    ├── Y3_SaS_CB_004_S5_L006_I1_001.fastq.gz
    ├── Y3_SaS_CB_004_S5_L006_R1_001.fastq.gz
    ├── Y3_SaS_CB_004_S5_L006_R2_001.fastq.gz
    ├── Y3_SaS_CB_004_S6_L006_I1_001.fastq.gz
    ├── Y3_SaS_CB_004_S6_L006_R1_001.fastq.gz
    ├── Y3_SaS_CB_004_S6_L006_R2_001.fastq.gz
    ├── Y3_SaS_CB_004_S7_L006_I1_001.fastq.gz
    ├── Y3_SaS_CB_004_S7_L006_R1_001.fastq.gz
    ├── Y3_SaS_CB_004_S7_L006_R2_001.fastq.gz
    ├── Y3_SaS_CB_004_S8_L006_I1_001.fastq.gz
    ├── Y3_SaS_CB_004_S8_L006_R1_001.fastq.gz
    └── Y3_SaS_CB_004_S8_L006_R2_001.fastq.gz
关于cellranger fastq文件的命名规则：
[Sample Name] [Sample Index] [Lane ID] [Read Type]
举个例子：
Y3_SaS_CB_004_S5_L006_R1_001.fastq.gz
Sample Name = Y3_SaS_CB_004
Sample Index = S5
Lane ID = L006
Read Type = R1
以此样本为例，cellranger count的命令如下：
# 在data/文件夹下
cellranger count --id=young3 \
--transcriptome=../ref/gencode_vM12 \
--fastqs=fastq/Y3/ \
--sample=Y3_SaS_CB_004 \ # 注意这里必须是fastq文件的SampleName前缀名，cellranger会将带有这一前缀的文件看做同一个样本
--localcores=16 \ # 指派16个核
--expect-cells=10000 \ 
--localmem=64 # 指派64G内存
直接运行此脚本批量执行cellranger count命令
# 在script下运行此命令
bash 02-count.sh
这一步我们会得到6个样本的基因表达矩阵
.
├── data
│   ├── fastq
│   ├── old1
│   ├── old2
│   ├── old3
│   ├── processed
│   ├── young1
│   ├── young2
│   └── young3
├── ref
│   ├── gencode_vM12
│   ├── gencode.vM12.annotation.gtf
│   ├── mm10_rmsk.gtf
└── scripts
    ├── 01-download.sh
    ├── 02-count.sh
    ├── 03-velocyto.sh
    ├── E-MTAB-7869.sdrf.txt
    ├── fastq.txt
    └── run_parallel.py
velocyto.py run10x
input
: bam, gene.gtf, rmsk.gtf
output
: spliced and unspliced expression matrix (loom)
这一步需要大约64G内存。
velocyto run10x -m ../ref/mm10_rmsk.gtf old1 ../ref/gencode.vM12.annotation.gtf
直接执行script下的脚本，计算所有的样本。
bash 03-velocyto.sh
下游分析
首先执行script目录下的
04-prepare_files.sh
脚本，准备数据集。
bash 04-prepare_files.sh
在data目录下面会多出matrix和loom两个文件夹，这两个文件夹分别放了cellranger的UMI counts matrix以及velocyto.py的spliced and unspliced matrix
data
├── loom
│   ├── old1.loom
│   ├── old2.loom
│   ├── old3.loom
│   ├── young1.loom
│   ├── young2.loom
│   └── young3.loom
├── matrix
│   ├── old1
│   ├── old2
│   ├── old3
│   ├── young1
│   ├── young2
│   └── young3
data文件夹和ref文件夹已上传至微云
https://share.weiyun.com/5ohZLOk
数据预处理
见
scripts/s1_prepare.Rmd
去除批次效应
见
scripts/s2_runCCA.Rmd
降维聚类
见
scripts/s3_tsne_clustering.Rmd
细胞类型鉴定
见
scripts/s4_annotateCellType.Rmd
差异基因分析
见
scripts/s5_DEG.Rmd
轨迹分析
见
scripts/s6_trajectory.Rmd
RNA动力学分析
见
scripts/s7_RNAVelocity.Rmd
结论
结果图跟文章有些出入，分析原因可能是细胞的数量、特征基因的选择差异导致的，不过文章的结论是成立的。
Session Info
sessionInfo()