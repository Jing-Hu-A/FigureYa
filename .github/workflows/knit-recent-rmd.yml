name: Knit Rmd Files (Selective - Recent Changes)

on:
  workflow_dispatch:

jobs:
  knit-rmd:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. Check out repository (LFS disabled)
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0  # 获取完整历史记录用于比较

      - name: 2. Install system dependencies and Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs libmagick++-dev libgeos-dev libgfortran5 liblapack-dev libblas-dev \
            libpng-dev libjpeg-dev librsvg2-dev libcairo2-dev libnode-dev libproj-dev \
            libxml2-dev libcurl4-openssl-dev libssl-dev libhdf5-dev libv8-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev libgdal-dev \
            libfreetype6-dev libtiff5-dev libudunits2-dev 
          git lfs install

      - name: 3. Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'latest'
      
      - name: 4. Set up Java for rJava
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: 5. Configure R for Java
        run: sudo R CMD javareconf

      - name: 6. Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: 7. Install core R dependencies
        run: Rscript -e 'install.packages(c("rmarkdown", "knitr", "remotes"))'

      - name: 8. Find recently modified Rmd files
        id: find_recent
        run: |
          # 设置时间阈值（2小时前）
          THRESHOLD_TIME=$(date -d '2 hours ago' --iso-8601=seconds)
          echo "Threshold time: $THRESHOLD_TIME"
          
          # 确保 auto_Knit_online.txt 文件存在
          if [ ! -f auto_Knit_online.txt ]; then
            echo "auto_Knit_online.txt file not found. Please provide this file to specify which Rmd files to knit."
            exit 1
          fi
          
          # 读取 auto_Knit_online.txt 中的模式
          TO_KNIT=$(<auto_Knit_online.txt)
          echo "Patterns to knit: $TO_KNIT"
          
          # 创建临时文件来存储需要渲染的文件列表
          RECENT_FILES_FILE="recent_rmd_files.txt"
          > "$RECENT_FILES_FILE"
          
          # 查找所有匹配 auto_Knit_online.txt 的 Rmd 文件
          find . -type f -name "*.Rmd" | while IFS= read -r rmd_file; do
            # 检查是否匹配 auto_Knit_online.txt 中的模式
            MATCHED=false
            for pattern in $TO_KNIT; do
              if [[ "$rmd_file" == *"$pattern"* ]]; then
                MATCHED=true
                break
              fi
            done
            
            if [ "$MATCHED" = false ]; then
              continue
            fi
            
            # 检查文件是否在2小时内有修改
            if [ -f "$rmd_file" ]; then
              FILE_TIME=$(date -r "$rmd_file" --iso-8601=seconds)
              if [[ "$FILE_TIME" > "$THRESHOLD_TIME" ]]; then
                echo "$rmd_file" >> "$RECENT_FILES_FILE"
                echo "Found recent file: $rmd_file (modified: $FILE_TIME)"
              else
                # 检查git历史中是否有最近2小时的提交涉及此文件
                GIT_CHANGED=$(git log --since="$THRESHOLD_TIME" --name-only --oneline -- "$rmd_file" | head -n 10)
                if [ -n "$GIT_CHANGED" ]; then
                  echo "$rmd_file" >> "$RECENT_FILES_FILE"
                  echo "Found recently committed file: $rmd_file"
                fi
              fi
            fi
          done
          
          # 统计找到的文件数量
          RECENT_COUNT=$(wc -l < "$RECENT_FILES_FILE" | tr -d ' ')
          echo "Found $RECENT_COUNT recently modified Rmd files"
          echo "recent_count=$RECENT_COUNT" >> $GITHUB_OUTPUT
          
          # 显示找到的文件列表
          if [ $RECENT_COUNT -gt 0 ]; then
            echo "Files to render:"
            cat "$RECENT_FILES_FILE"
          else
            echo "No recently modified Rmd files found in the last 2 hours."
          fi

      - name: 9. Render recent Rmd files
        id: render_rmd
        if: steps.find_recent.outputs.recent_count != '0'
        run: |
          RECENT_FILES_FILE="recent_rmd_files.txt"
          ANY_FILE_FAILED=false
          
          echo "RMD Render Summary (Recent Changes - Last 2 Hours)" > summary.txt
          echo "==================================================" >> summary.txt
          echo "" >> summary.txt
          echo "Render time: $(date)" >> summary.txt
          echo "" >> summary.txt
          
          # 处理每个最近修改的 Rmd 文件
          while IFS= read -r rmd_file; do
            if [ -z "$rmd_file" ]; then
              continue
            fi
            
            rmd_dir=$(dirname "$rmd_file")
            rmd_basename=$(basename "$rmd_file")
            
            echo "========== START: $rmd_file =========="
            echo "Processing: $rmd_file"
            
            # 检查并安装依赖
            if [ -f "$rmd_dir/install_dependencies.R" ]; then
              echo "Installing dependencies for $rmd_file..."
              (cd "$rmd_dir" && Rscript install_dependencies.R > install.log 2>&1 || echo "WARNING: Dependency installation failed for $rmd_file.")
            fi
            
            # 渲染 Rmd 文件
            echo "Rendering $rmd_file..."
            if Rscript -e "rmarkdown::render('$rmd_file', quiet=FALSE)" > "${rmd_file%.Rmd}_render.log" 2>&1; then
              echo "[SUCCESS] - $rmd_file" | tee -a summary.txt
              # 记录渲染时间
              echo "  Rendered at: $(date)" >> summary.txt
            else
              ANY_FILE_FAILED=true
              echo "[FAILED] - $rmd_file" | tee -a summary.txt
              echo "--- Error Log for $rmd_file ---" | tee -a summary.txt
              tail -n 20 "${rmd_file%.Rmd}_render.log" | tee -a summary.txt
              echo "-----------------------------------" | tee -a summary.txt
            fi
            
            echo "=========== END: $rmd_file ==========="
            echo ""
            
          done < "$RECENT_FILES_FILE"
          
          # 输出作业状态
          echo "job_failed=$ANY_FILE_FAILED" >> $GITHUB_OUTPUT

      - name: 10. Skip rendering if no recent files
        if: steps.find_recent.outputs.recent_count == '0'
        run: |
          echo "No Rmd files modified in the last 2 hours. Skipping rendering." > summary.txt
          echo "Last checked: $(date)" >> summary.txt
          echo "Threshold: 2 hours" >> summary.txt

      - name: 11. Upload Render Summary
        uses: actions/upload-artifact@v4
        with:
          name: render-summary
          path: summary.txt

      - name: 12. Upload individual render logs
        if: steps.find_recent.outputs.recent_count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: render-logs
          path: "**/*_render.log"

      - name: 13. Update Batch State and Commit Files
        if: steps.find_recent.outputs.recent_count != '0'
        run: |
          # 配置 Git 用户信息
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 确保拉取最新的更改
          echo "Pulling latest changes from remote..."
          git pull origin main --rebase --autostash
          
          # 添加生成的 HTML 文件和其他输出
          echo "Adding all generated files to git..."
          git add --all

          # 添加 summary 文件
          if [ -f summary.txt ]; then git add summary.txt; fi
          
          # 检查是否有任何更改
          if ! git diff --staged --quiet; then
            git commit -m "chore: Auto-render recently modified Rmd files (last 2 hours)"
            
            # 推送更改到远程仓库
            echo "Pushing changes to remote..."
            if ! git push origin main; then
              echo "Push failed, attempting force push after rebase..."
              git push origin main --force
            fi
          else
            echo "No new files or changes to commit."
          fi

      - name: 14. Report Final Status
        if: always()
        run: |
          if [ "${{ steps.find_recent.outputs.recent_count }}" = "0" ]; then
            echo "No Rmd files were modified in the last 2 hours. Workflow completed without rendering."
          elif [ "${{ steps.render_rmd.outputs.job_failed }}" = "true" ]; then
            echo "::warning ::One or more Rmd files failed to render. Check the 'render-summary' and 'render-logs' artifacts for details."
          else
            echo "All recently modified Rmd files were processed successfully."
          fi
          echo "Recent files count: ${{ steps.find_recent.outputs.recent_count }}"
