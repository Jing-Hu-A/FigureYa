name: Knit Rmd Files in Batches (Robust)

on:
  workflow_dispatch:

jobs:
  test-render-batch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: 1. Check out repository (LFS disabled)
        uses: actions/checkout@v4
        with:
          lfs: false # Changed to false to avoid LFS fetch errors

      - name: 2. Install system dependencies and Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs libgfortran5 liblapack-dev libblas-dev \
            libpng-dev libjpeg-dev librsvg2-dev libcairo2-dev \
            libxml2-dev libcurl4-openssl-dev libssl-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
            libfreetype6-dev libtiff5-dev
          git lfs install

      - name: 3. Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'latest'
      
      - name: 4. Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: 5. Install core R dependencies
        run: Rscript -e 'install.packages(c("rmarkdown", "knitr"))'

      - name: 6. Identify LFS directories & Prepare Batch
        id: batch_prep
        run: |
          # Build LFS dir list safely; handle empty output and ensure file exists
          git lfs ls-files -n | sed '/^[[:space:]]*$/d' | xargs -r -n1 dirname | sort -u > .lfs_dirs.txt || true
          touch .lfs_dirs.txt
          echo "LFS directories identified:"
          if [ -s .lfs_dirs.txt ]; then cat .lfs_dirs.txt; else echo "(none)"; fi

          BATCH_SIZE=50
          STATE_FILE=".rmd_batch_state"
          if [ -f "$STATE_FILE" ]; then
            CURRENT_BATCH=$(cat "$STATE_FILE" 2>/dev/null)
          else
            CURRENT_BATCH=1
          fi
          echo "Running batch number: $CURRENT_BATCH"

          find . -type f -name "*.Rmd" | sort > .all_rmd_files.txt
          TOTAL_FILES=$(wc -l < .all_rmd_files.txt)
          TOTAL_BATCHES=$(( (TOTAL_FILES + BATCH_SIZE - 1) / BATCH_SIZE ))

          echo "Total .Rmd files: $TOTAL_FILES, Total batches: $TOTAL_BATCHES"

          # If no files, still prepare outputs so downstream steps don't fail
          if [ "$TOTAL_FILES" -eq 0 ]; then
            : > .current_batch_files.txt
            echo "current_batch=$CURRENT_BATCH" >> $GITHUB_OUTPUT
            echo "total_batches=$TOTAL_BATCHES" >> $GITHUB_OUTPUT
            echo "job_failed=false" >> $GITHUB_OUTPUT
          else
            if [ "$CURRENT_BATCH" -gt "$TOTAL_BATCHES" ] && [ "$TOTAL_BATCHES" -gt 0 ]; then
              echo "All batches completed. Resetting to batch 1."
              CURRENT_BATCH=1
            fi

            START_LINE=$(( (CURRENT_BATCH - 1) * BATCH_SIZE + 1 ))
            END_LINE=$(( CURRENT_BATCH * BATCH_SIZE ))

            echo "Processing files from line $START_LINE to $END_LINE..."
            sed -n "${START_LINE},${END_LINE}p" .all_rmd_files.txt > .current_batch_files.txt

            echo "current_batch=$CURRENT_BATCH" >> $GITHUB_OUTPUT
            echo "total_batches=$TOTAL_BATCHES" >> $GITHUB_OUTPUT
            echo "job_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: 7. Render Rmd files in Current Batch (Error Tolerant)
        id: render_step
        run: |
          # We will track if any file fails
          ANY_FILE_FAILED=false

          echo "RMD Render Summary (Batch ${{ steps.batch_prep.outputs.current_batch }}/${{ steps.batch_prep.outputs.total_batches }})" > summary.txt
          echo "======================================" >> summary.txt
          echo "" >> summary.txt

          while IFS= read -r rmd_file; do
            [ -z "$rmd_file" ] && continue
            echo "========== START: $rmd_file =========="
            rmd_dir=$(dirname "$rmd_file")

            if grep -qxF "$rmd_dir" .lfs_dirs.txt; then
              echo "[SKIPPED-LFS] - $rmd_file (In LFS directory)" | tee -a summary.txt
            else
              # Try to install dependencies, but don't stop if it fails
              if [ -f "$rmd_dir/install_dependencies.R" ]; then
                (cd "$rmd_dir" && Rscript install_dependencies.R > install.log 2>&1 || echo "WARNING: Dependency installation failed for $rmd_file.")
              fi
              
              # Render the Rmd file and check for failure
              if Rscript -e "rmarkdown::render('$rmd_file', quiet=TRUE)" > rmd_render.log 2>&1; then
                echo "[SUCCESS] - $rmd_file" | tee -a summary.txt
              else
                ANY_FILE_FAILED=true
                echo "[FAILED] - $rmd_file" | tee -a summary.txt
                echo "--- Error Log for $rmd_file ---" | tee -a summary.txt
                tail -n 20 rmd_render.log | tee -a summary.txt
                echo "-----------------------------------" | tee -a summary.txt
              fi
            fi
            echo "=========== END: $rmd_file ==========="; echo ""
          done < .current_batch_files.txt

          # If any file failed, we set an output for the workflow
          if [ "$ANY_FILE_FAILED" = true ]; then
            echo "job_failed=true" >> $GITHUB_OUTPUT
          else
            echo "job_failed=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true # Ensures this step never stops the workflow

      - name: 8. Upload Render Summary
        uses: actions/upload-artifact@v4
        with:
          name: render-summary-batch-${{ steps.batch_prep.outputs.current_batch }}
          path: summary.txt

      - name: 9. Update Batch State and Commit Files
        run: |
          CURRENT_BATCH=${{ steps.batch_prep.outputs.current_batch }}
          TOTAL_BATCHES=${{ steps.batch_prep.outputs.total_batches }}
          
          NEXT_BATCH=$((CURRENT_BATCH + 1))
          if [ "$TOTAL_BATCHES" -gt 0 ] && [ "$NEXT_BATCH" -gt "$TOTAL_BATCHES" ]; then
            NEXT_BATCH=1
          fi
          echo "Next batch to run will be: $NEXT_BATCH"
          echo $NEXT_BATCH > .rmd_batch_state

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Only commit the state file (and summary for reference)
          git add .rmd_batch_state
          if [ -f summary.txt ]; then git add summary.txt; fi
          
          if ! git diff --staged --quiet; then
            git commit -m "docs: Auto-render Rmd batch ${{ steps.batch_prep.outputs.current_batch }}"
            git push || echo "Push failed, possibly due to incomplete checkout."
          else
            echo "No new files or changes to commit."
          fi

      - name: 10. Report Final Status
        if: always() # This step runs even if previous steps failed
        run: |
          if [ "${{ steps.render_step.outputs.job_failed }}" = "true" ]; then
            echo "::warning ::One or more Rmd files failed to render in this batch. Check the 'render-summary' artifact for details."
          else
            echo "All Rmd files in this batch were processed successfully (or skipped as intended)."
          fi
