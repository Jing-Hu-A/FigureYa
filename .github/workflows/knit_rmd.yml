name: Knit Rmd Files

on:
  workflow_dispatch:

jobs:
  knit-rmd:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: 1. Check out repository
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0  # 获取完整历史记录以便rebase

      - name: 2. Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs libmagick++-dev libgeos-dev libgfortran5 liblapack-dev libblas-dev \
            libpng-dev libjpeg-dev librsvg2-dev libcairo2-dev libnode-dev libproj-dev \
            libxml2-dev libcurl4-openssl-dev libssl-dev libhdf5-dev libv8-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev libgdal-dev \
            libfreetype6-dev libtiff5-dev libudunits2-dev 
          git lfs install

      - name: 3. Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'latest'
      
      - name: 4. Set up Java for rJava
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: 5. Configure R for Java
        run: sudo R CMD javareconf
      
      - name: 6. Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: 7. Install core R dependencies
        run: Rscript -e 'install.packages(c("rmarkdown", "knitr", "remotes"))'

      - name: 8. Identify Rmd files to knit
        id: identify_rmd
        run: |
          # 读取FigureYa/to_Knit.txt文件中的文件夹名称
          TO_KNIT_FILE="to_Knit.txt"
          if [ -f "$TO_KNIT_FILE" ]; then
            TARGET_DIRS=$(cat "$TO_KNIT_FILE" | xargs -I {} echo "./{}")
          else
            echo "No to_Knit.txt file found!"
            exit 1
          fi

          echo "Target directories:"
          echo "$TARGET_DIRS"

          # 查找指定目录中的Rmd文件
          find $TARGET_DIRS -type f -name "*.Rmd" | sort > .all_rmd_files.txt
          TOTAL_FILES=$(wc -l < .all_rmd_files.txt)

          if [ "$TOTAL_FILES" -eq 0 ]; then
            echo "No .Rmd files found in the specified directories."
            exit 1
          fi

          echo "Found $TOTAL_FILES .Rmd files."
          cat .all_rmd_files.txt

      - name: 9. Knit Rmd files
        run: |
          echo "Starting knitting process..."
          
          while IFS= read -r rmd_file; do
            [ -z "$rmd_file" ] && continue
            echo "Processing $rmd_file..."
            rmd_dir=$(dirname "$rmd_file")
            output_file="${rmd_file%.Rmd}.html"

            if [ -f "$rmd_dir/install_dependencies.R" ]; then
              echo "Installing dependencies for $rmd_file..."
              (cd "$rmd_dir" && Rscript install_dependencies.R > install.log 2>&1 || echo "WARNING: Dependency installation failed for $rmd_file.")
            fi

            echo "Knitting $rmd_file..."
            if Rscript -e "rmarkdown::render('$rmd_file', output_file='$output_file', quiet=TRUE)" > rmd_render.log 2>&1; then
              echo "[SUCCESS] - $rmd_file"
              git add "$output_file"
            else
              echo "[FAILED] - $rmd_file"
              echo "--- Error Log for $rmd_file ---"
              tail -n 20 rmd_render.log
              echo "-----------------------------------"
            fi
          done < .all_rmd_files.txt

      - name: 10. Update and Commit Files
        run: |
          # 配置 Git 用户信息
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 首先拉取远程最新更改并进行 rebase
          echo "Pulling latest changes from remote..."
          git pull origin main --rebase --autostash
      
          # 添加所有生成的HTML文件
          find . -name "*.html" -not -path "./.git/*" | xargs git add 2>/dev/null || true
          
          if [ -f summary.txt ]; then git add summary.txt; fi
          
          if ! git diff --staged --quiet; then
            git commit -m "docs: Auto-render Rmd files from to_Knit.txt"
            
            # 尝试推送，如果失败则进行强制推送
            echo "Pushing changes to remote..."
            if ! git push origin main; then
              echo "Push failed, attempting force push after rebase..."
              git push origin main --force
            fi
          else
            echo "No new files or changes to commit."
          fi
