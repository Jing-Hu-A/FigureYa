FigureYa172ggplot2Gviz
FigureYa172ggplot2Gviz
小丫画图出品
2020-4-12
欢迎关注“小丫画图”公众号，回复“小白”，看小视频，实现点鼠标跑代码。
小丫微信: epigenomics E-mail:
figureya@126.com
作者：赵龙
小丫编辑校验
需求描述
以bw或bedgraph文件作为输入，提取信号，用ggplot2画这种峰图。
出自
http://www.genesdev.org/cgi/doi/10.1101/gad.309583.117
Figure 4. Gene-specific analysis of the dynamics of RNA expression, EBF1 occupancy, chromatin accessibility, H3K4me2 modifica- tion, and DNA methylation after EBF1 induction. Representative genes include
Igll1 of cluster U1 (A)
, Cd79a of cluster U4 (B), Pdgfrb of cluster D3 (C ), and Cebpb of cluster D4 (D). The positions of EBF1-bound sites are highlighted with red boxes. The scale of the Y-axis represents RPKM in ChIP-seq and ATAC-seq tracks and percentage in the DNA methylation tracks, in which each black dot represents one CpG.
这篇文章的解读看这里：
https://mp.weixin.qq.com/s/zmf0GMdGZqNxseFZKHooOw
其中Figure 2C的画法可参考Figure44profile。
FigureYa107ChIPheatmap和FigureYa108RNAseqChIP复现了文中的Figure 2AB和Figure 3AB。
应用场景
该图在基因转录调控机制文章里经常出现，在文章里的应用可参考这篇：
https://mp.weixin.qq.com/s/blTL1HIKaOh4IhbmIgXcig
。
通常在IGV里查看测序信号分布（bam、bw、wig、bedgraph），这样能够直观地看到基因在哪里转录（RNA-seq）、蛋白质结合在哪里（ChIP-seq）或染色质开放的区域（ATAC-seq）。同样可以看m6A、RIP-seq等数据。
想把这种图作为Figure放到文章里，有人喜欢用IGV，有人喜欢用WashU brower。群里的小伙伴喜欢自己用代码画图，例如用Gviz画，可参考FigureYa3genomeView；用sushi画，可参考FigureYa82IGVzoom。小丫曾看过作者用ggplot2画这种图，于是请他来分享这套代码。
用ggplot2画图，不仅方便修改细节，还可以很方便的用cowplot把画好的峰图跟其他图拼在一起，cowplot用法可参考这篇
https://mp.weixin.qq.com/s/O9zWCgIgz75Qo7cE6bSZCA
。
跟谁拼一起能充分展示转录调控证据呢？
可以像例文那样，左边放RNA-seq的bar plot。
还可以在下面画个motif的track，甚至把motif的logo加上去。
环境设置
画图前的代码需要在terminal里运行，可参考这篇方法
https://www.jianshu.com/p/c16c7095e4b2?from=singlemessage&isappinstalled=0
使用国内镜像安装包
options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
加载包
library(ggplot2)
library(cowplot)
Sys.setenv(LANGUAGE = "en") #显示英文报错信息
options(stringsAsFactors = FALSE) #禁止chr转成factor
输入文件的准备
数据下载
如果你的数据是bedgraph格式，就直接跳到“提取所需位置的track信息”。
从GEO数据库下载别人已发表的ChIP/ATAC/RNA-seq数据。点击Supplementary file里的custom，勾选想要画的样本的bedgraph或bw或wig文件，点击Download下载。
ChIP-seq，GSE107236。作者提供了bedgraph文件
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE107236
ATAC-seq，GSE107242。作者提供了bigwig文件
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE107242
，需要先转换成bedgraph。
以上数据已传到微云，便于下载，
https://share.weiyun.com/55dfZPV
如果你感兴趣的数据作者没有上传bedgraph或bw或wig文件，可以从SRA格式开始跑，方法可参考FigureYa155ATAC。
bigwig转bedgraph
作者提供的ATAC-seq数据是bigwig文件，需要转换成纯文本文件bedgraph去画图。
把bigwig文件转换成bedgraph，需要用到一个小工具bigWigTobedgraph。
# 安装bigwigtobedgraph
conda install -c bioconda ucsc-bigwigtobedgraph

# bigwig转bedgraph
bigWigToBedGraph -chrom=chr16 -start=16858001 -end=16868347 GSM2863128_N06_0.RPKM_nor.bw 0_ATAC_Igll1.bedgraph
bigWigToBedGraph -chrom=chr16 -start=16858001 -end=16868347 GSM2863129_NO6_24.RPKM_nor.bw 24_ATAC_Igll1.bedgraph
bigWigToBedGraph -chrom=chr16 -start=16858001 -end=16868347 GSM2863130_NO6_72.RPKM_nor.bw 72_ATAC_Igll1.bedgraph
bigWigToBedGraph -chrom=chr16 -start=16858001 -end=16868347 GSM2863131_NO6_cd19pos.RPKM_nor.bw proB_ATAC_Igll1.bedgraph
提取所需位置的track信息
例文展示的是Igll1基因附近的区域，把基因位置信息写入Igll1.bed文件，然后提取这段区域的信号，用于画图。
bedtools intersect -wa -a GSM2863140_Input_NO8_24_mm9.bedGraph -b Igll1.bed> 0_EBF1_Igll1.bedgraph
bedtools intersect -wa -a GSM2863147_EBF1_NO14_24_mm9.bedGraph -b Igll1.bed> 24_EBF1_Igll1.bedgraph
bedtools intersect -wa -a GSM2863148_EBF1_NO14_72_mm9.bedGraph -b Igll1.bed> 72_EBF1_Igll1.bedgraph
bedtools intersect -wa -a GSM2863149_EBF1_NO14_cd19pos_mm9.bedGraph -b Igll1.bed> proB_EBF1_Igll1.bedgraph
准备基因结构文件
从gtf文件里可以找到基因exon的具体位置。
小鼠和人通常用gencode的基因注释文件。mm9的gtf文件：
https://www.gencodegenes.org/mouse/release_M9.html
，已传到微云便于下载，
https://share.weiyun.com/55dfZPV
。人的
https://www.gencodegenes.org/human/
，其他物种可以从ensembl下载
http://asia.ensembl.org/info/data/ftp/index.html
例文用的Igll1基因包含两个exon的转录本，我们也用这个。ID是ENSMUST00000124649.1。位置：chr16:16860674-16863985。下面就提取这个基因的外显子。
grep Igll1 gencode.vM9.annotation.gtf | grep ENSMUST00000124649.1 |grep exon | awk '{print $4,$5,$3}' OFS="\t" > Igll1.gene.txt
开始画图
策略是用ggplot2画track和gene structure，然后用cowplot拼在一起
画EBF1的ChIP-seq track
# 读入bedgraph
ebf0 <- read.table("0_EBF1_Igll1.bedgraph",head=F)
head(ebf0)
ebf24 <- read.table("24_EBF1_Igll1.bedgraph",head=F)
ebf72 <- read.table("72_EBF1_Igll1.bedgraph",head=F)
ebf_prob <- read.table("proB_EBF1_Igll1.bedgraph",head=F)

# 读入exon信息，用于画基因结构
gene <- read.table("Igll1.gene.txt",head=F)
head(gene)
# 自定义主题
gene_axis_theme <- theme(
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        axis.line.y=element_blank()
)

track_axis_theme <- theme(
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank()
)

# 开始画每一个track
pe0 <- ggplot(ebf0)+
        geom_line(aes((V2+V3)/2,V4),color="#D95F02")+
        geom_area(aes((V2+V3)/2,V4),fill="#D95F02",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,170))+
        track_axis_theme

pe1 <- ggplot(ebf24)+
        geom_line(aes((V2+V3)/2,V4),color="#D95F02")+
        geom_area(aes((V2+V3)/2,V4),fill="#D95F02",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,170))+
        track_axis_theme


pe2 <- ggplot(ebf72)+
        geom_line(aes((V2+V3)/2,V4),color="#D95F02")+
        geom_area(aes((V2+V3)/2,V4),fill="#D95F02",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,170))+
        track_axis_theme


pe3 <- ggplot(ebf_prob)+
        geom_line(aes((V2+V3)/2,V4),color="#D95F02")+
        geom_area(aes((V2+V3)/2,V4),fill="#D95F02",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,170))+
        track_axis_theme

# 画基因结构
# 16860674,16863985两个数字来自于转录本的起始和终止。
# 箭头的方向是负向
arrow <- data.frame(x=seq(16860674,16863985,length.out=4)[1:3])
peg <- ggplot()+
        geom_segment(data=arrow,aes(x=16863985,xend=x,y=0,yend=0),
        arrow = arrow(),color="#7570B3")+
        geom_rect(data=gene,aes(xmin=V1,xmax=V2,ymin=-1,ymax=1),
        color="#7570B3",fill="#7570B3",alpha=0.5)+
        coord_cartesian(xlim=c(16858001,16868347))+
        theme_classic()+
        labs(x="",y="")+
        gene_axis_theme

plot_grid(pe0,pe1,pe2,pe3,peg,
          ncol=1,align="v",rel_heights=c(1,1,1,1,0.34))
ggsave("ggplot2Gviz_1col.pdf", width = 4, height = 10)
加上ATAC-seq的track
at0 <- read.table("0_ATAC_Igll1.bedgraph",head=F)
at24 <- read.table("24_ATAC_Igll1.bedgraph",head=F)
at72 <- read.table("72_ATAC_Igll1.bedgraph",head=F)
at_prob <- read.table("proB_ATAC_Igll1.bedgraph",head=F)

pa0 <- ggplot(at0)+
        geom_line(aes((V2+V3)/2,V4),color="#1B9E77")+
        geom_area(aes((V2+V3)/2,V4),fill="#1B9E77",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,50))+
        track_axis_theme

pa1 <- ggplot(at24)+
        geom_line(aes((V2+V3)/2,V4),color="#1B9E77")+
        geom_area(aes((V2+V3)/2,V4),fill="#1B9E77",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,50))+
        track_axis_theme

pa2 <- ggplot(at72)+
        geom_line(aes((V2+V3)/2,V4),color="#1B9E77")+                                         
        geom_area(aes((V2+V3)/2,V4),fill="#1B9E77",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,50))+
        track_axis_theme

pa3 <- ggplot(at_prob)+
        geom_line(aes((V2+V3)/2,V4),color="#1B9E77")+
        geom_area(aes((V2+V3)/2,V4),fill="#1B9E77",alpha=.5)+
        theme_classic()+
        labs(x="",y="")+
        coord_cartesian(xlim=c(16858001,16868347),ylim=c(0,50))+
        track_axis_theme

# 拼图
plot_grid(pe0,pa0,pe1,pa1,pe2,pa2,pe3,pa3,peg,peg,
          ncol=2, align="v",
          rel_heights=c(1,1,1,1,0.34))
ggsave("ggplot2Gviz_2col.pdf")
Session Info
sessionInfo()